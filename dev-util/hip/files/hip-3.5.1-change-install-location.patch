--- HIP-rocm-3.5.1/CMakeLists.txt.orig	2020-07-21 19:56:06.382439996 +0200
+++ HIP-rocm-3.5.1/CMakeLists.txt	2020-07-21 20:01:22.092320682 +0200
@@ -4,6 +4,8 @@
 #  cmake -DHIP_COMPILER=clang -DHIP_PLATFORM=rocclr ..
 #  cmake -DHIP_COMPILER=clang -DHIP_PLATFORM=rocclr -DROCclr_DIR=/extra/lmoriche/hip-rocclr/rocclr -DOPENCL_DIR=/extra/lmoriche/clients/lmoriche_opencl_dev2/drivers/opencl/api/opencl -DLIBROCclr_STATIC_DIR=/extra/lmoriche/hip-rocclr/build/rocclr ..
 
+include (GNUInstallDirs)
+
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 
 #############################
@@ -269,7 +269,7 @@
 # Build steps
 #############################
 set(BIN_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/bin)
-set(LIB_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/lib)
+set(LIB_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/lib64)
 set(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/include)
 set(CONFIG_PACKAGE_INSTALL_DIR ${LIB_INSTALL_DIR}/cmake/hip)
 
@@ -448,11 +448,11 @@
 
 # Install .hipInfo
 if(HIP_PLATFORM STREQUAL "hcc" OR HIP_PLATFORM STREQUAL "rocclr")
-    install(FILES ${PROJECT_BINARY_DIR}/.hipInfo DESTINATION lib)
+    install(FILES ${PROJECT_BINARY_DIR}/.hipInfo DESTINATION lib64)
 endif()
 
 # Install .hipInfo
-install(FILES ${PROJECT_BINARY_DIR}/.hipInfo DESTINATION lib)
+install(FILES ${PROJECT_BINARY_DIR}/.hipInfo DESTINATION lib64)
 
 # Install .hipVersion
 install(FILES ${PROJECT_BINARY_DIR}/.hipVersion DESTINATION bin)
@@ -462,11 +464,11 @@
     if(HIP_RUNTIME STREQUAL "HCC")
         install(DIRECTORY src DESTINATION .)
     elseif(HIP_RUNTIME STREQUAL "ROCclr")
-        install(DIRECTORY rocclr DESTINATION .)
+        install(DIRECTORY rocclr DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
     endif()
-    install(DIRECTORY bin DESTINATION . USE_SOURCE_PERMISSIONS)
-    install(DIRECTORY include DESTINATION .)
-    install(DIRECTORY cmake DESTINATION .)
+    install(DIRECTORY bin DESTINATION ${CMAKE_INSTALL_PREFIX} USE_SOURCE_PERMISSIONS)
+    install(DIRECTORY include DESTINATION ${CMAKE_INSTALL_PREFIX})
+    install(DIRECTORY cmake DESTINATION ${CMAKE_INSTALL_PREFIX}/share/cmake/Modules)
 endif()
 
 # Install generated headers
--- HIP-rocm-3.5.1/rocclr/CMakeLists.txt.orig	2020-07-21 21:33:56.099548548 +0200
+++ HIP-rocm-3.5.1/rocclr/CMakeLists.txt	2020-07-21 21:34:25.698361956 +0200
@@ -10,7 +10,7 @@
 set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY  ${CMAKE_BINARY_DIR}/lib)
 
-set(LIB_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/lib)
+set(LIB_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/lib64)
 set(CONFIG_PACKAGE_INSTALL_DIR ${LIB_INSTALL_DIR}/cmake/hip)
 
 find_package(PythonInterp REQUIRED)
@@ -212,14 +212,14 @@
 )
 
 
-INSTALL(PROGRAMS $<TARGET_FILE:amdhip64_static> DESTINATION lib COMPONENT MAIN)
-INSTALL(PROGRAMS $<TARGET_FILE:amdhip64> DESTINATION lib COMPONENT MAIN)
-INSTALL(CODE "execute_process( COMMAND ${CMAKE_COMMAND} -E create_symlink libamdhip64.so lib/libhip_hcc.so  )" DESTINATION lib COMPONENT MAIN)
+INSTALL(PROGRAMS $<TARGET_FILE:amdhip64_static> DESTINATION lib64 COMPONENT MAIN)
+INSTALL(PROGRAMS $<TARGET_FILE:amdhip64> DESTINATION lib64 COMPONENT MAIN)
+INSTALL(CODE "execute_process( COMMAND ${CMAKE_COMMAND} -E create_symlink libamdhip64.so lib/libhip_hcc.so  )" DESTINATION lib64 COMPONENT MAIN)
 
-INSTALL(CODE "execute_process( COMMAND ${CMAKE_COMMAND} -E create_symlink libamdhip64.so lib/libhiprtc.so  )" DESTINATION lib COMPONENT MAIN)
-INSTALL(FILES ${CMAKE_BINARY_DIR}/lib/libhip_hcc.so DESTINATION lib COMPONENT MAIN)
+INSTALL(CODE "execute_process( COMMAND ${CMAKE_COMMAND} -E create_symlink libamdhip64.so lib/libhiprtc.so  )" DESTINATION lib64 COMPONENT MAIN)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/lib/libhip_hcc.so DESTINATION lib64 COMPONENT MAIN)
 
-INSTALL(FILES ${CMAKE_BINARY_DIR}/lib/libhiprtc.so DESTINATION lib COMPONENT MAIN)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/lib/libhiprtc.so DESTINATION lib64 COMPONENT MAIN)
 
 INSTALL(TARGETS amdhip64 amdhip64_static host device EXPORT hip-targets DESTINATION ${LIB_INSTALL_DIR})
 INSTALL(EXPORT hip-targets DESTINATION ${CONFIG_PACKAGE_INSTALL_DIR} NAMESPACE hip::)
--- HIP-rocm-3.5.1/bin/hipconfig.orig	2020-07-21 22:13:19.697045726 +0200
+++ HIP-rocm-3.5.1/bin/hipconfig	2020-07-21 22:20:04.740434072 +0200
@@ -83,17 +83,17 @@
 if (-e "$HIP_PATH/../.info/version") {
     $ROCM_PATH=$ENV{'ROCM_PATH'} // dirname("$HIP_PATH"); # use parent directory of HIP_PATH
 } else {
-    $ROCM_PATH=$ENV{'ROCM_PATH'} // "/opt/rocm";
+    $ROCM_PATH=$ENV{'ROCM_PATH'} // "/usr";
 }
 $CUDA_PATH=$ENV{'CUDA_PATH'} // '/usr/local/cuda';
 $HCC_HOME=$ENV{'HCC_HOME'} // "$ROCM_PATH/hcc";
-$HSA_PATH=$ENV{'HSA_PATH'} // "$ROCM_PATH/hsa";
-$HIP_CLANG_PATH=$ENV{'HIP_CLANG_PATH'} // "$ROCM_PATH/llvm/bin";
+$HSA_PATH=$ENV{'HSA_PATH'} // "$ROCM_PATH";
+$HIP_CLANG_PATH=$ENV{'HIP_CLANG_PATH'} // "$ROCM_PATH/lib/llvm/roc/bin";
 
 if (defined $HIP_ROCCLR_HOME) {
     $HIP_INFO_PATH= "$HIP_ROCCLR_HOME/lib/.hipInfo";
 } else {
-    $HIP_INFO_PATH= "$HIP_PATH/lib/.hipInfo"; # use actual file
+    $HIP_INFO_PATH= "$HIP_PATH/lib64/.hipInfo"; # use actual file
 }
 #---
 #HIP_PLATFORM controls whether to use NVCC or HCC for compilation:
@@ -136,7 +136,7 @@
     $HIP_CLANG_VERSION=~/.*clang version ([^ ]+).*/;
     $HIP_CLANG_VERSION=$1;
 
-    $CPP_CONFIG = " -D__HIP_PLATFORM_HCC__=  -I$HIP_PATH/include -I$HIP_CLANG_PATH/../lib/clang/$HIP_CLANG_VERSION -I$HSA_PATH/include";
+    $CPP_CONFIG = " -D__HIP_PLATFORM_HCC__=  -I$HIP_PATH/include -I$HIP_CLANG_PATH/../lib/clang/$HIP_CLANG_VERSION/include -I$HSA_PATH/include";
 }
 if ($HIP_RUNTIME eq "ROCclr") {
     $CPP_CONFIG .= " -D__HIP_ROCclr__";
--- HIP-rocm-3.5.1/bin/hipcc.orig	2020-07-21 22:20:18.674344380 +0200
+++ HIP-rocm-3.5.1/bin/hipcc	2020-07-21 22:32:22.976830188 +0200
@@ -80,7 +80,7 @@
 if (-e "$HIP_PATH/../.info/version") {
     $ROCM_PATH=$ENV{'ROCM_PATH'} // dirname("$HIP_PATH"); # use parent directory of HIP_PATH
 } else {
-    $ROCM_PATH=$ENV{'ROCM_PATH'} // "/opt/rocm";
+    $ROCM_PATH=$ENV{'ROCM_PATH'} // "/usr";
 }
 $HIP_ROCCLR_HOME=$ENV{'HIP_ROCCLR_HOME'};
 $HIP_LIB_PATH=$ENV{'HIP_LIB_PATH'};
@@ -92,7 +92,7 @@
 if (defined $HIP_ROCCLR_HOME) {
     $HIP_INFO_PATH= "$HIP_ROCCLR_HOME/lib/.hipInfo";
 } else {
-    $HIP_INFO_PATH= "$HIP_PATH/lib/.hipInfo"; # use actual file
+    $HIP_INFO_PATH= "$HIP_PATH/lib64/.hipInfo"; # use actual file
 }
 
 #---
@@ -143,21 +143,21 @@
 }
 
 if (defined $HIP_ROCCLR_HOME) {
-    if (!defined $HIP_CLANG_PATH and (-e "$HIP_ROCCLR_HOME/bin/clang" or -e "$HIP_ROCCLR_HOME/bin/clang.exe")) {
-        $HIP_CLANG_PATH = "$HIP_ROCCLR_HOME/bin";
+    if (!defined $HIP_CLANG_PATH and (-e "$HIP_ROCCLR_HOME/lib/llvm/roc/bin/clang" or -e "$HIP_ROCCLR_HOME/bin/clang.exe")) {
+        $HIP_CLANG_PATH = "$HIP_ROCCLR_HOME/lib/llvm/roc/bin";
     }
     if (!defined $DEVICE_LIB_PATH and -e "$HIP_ROCCLR_HOME/lib/bitcode") {
         $DEVICE_LIB_PATH = "$HIP_ROCCLR_HOME/lib/bitcode";
     }
     $HIP_INCLUDE_PATH = "$HIP_ROCCLR_HOME/include";
     if (!defined $HIP_LIB_PATH) {
-        $HIP_LIB_PATH = "$HIP_ROCCLR_HOME/lib";
+        $HIP_LIB_PATH = "$HIP_ROCCLR_HOME/lib64";
     }
 }
 
 if (defined $HIP_COMPILER and $HIP_PLATFORM eq "hcc" and $HIP_COMPILER eq "clang") {
   if (!defined $HIP_CLANG_PATH) {
-    $HIP_CLANG_PATH = "$ROCM_PATH/llvm/bin";
+    $HIP_CLANG_PATH = "$ROCM_PATH/lib/llvm/roc/bin";
   }
   if (!defined $DEVICE_LIB_PATH) {
     $DEVICE_LIB_PATH = "$ROCM_PATH/lib";
@@ -196,7 +196,7 @@
         $HIP_INCLUDE_PATH = "$HIP_PATH/include";
     }
     if (! defined $HIP_LIB_PATH) {
-        $HIP_LIB_PATH = "$HIP_PATH/lib";
+        $HIP_LIB_PATH = "$HIP_PATH/lib64";
     }
     if ($verbose & 0x2) {
         if (defined $HIP_ROCCLR_HOME) {
@@ -225,9 +223,6 @@
         $HIPCXXFLAGS .= " -Xclang -fallow-half-arguments-and-returns -D__HIP_HCC_COMPAT_MODE__=1";
     }
 
-    $HSA_PATH=$ENV{'HSA_PATH'} // "$ROCM_PATH/hsa";
-    $HIPCXXFLAGS .= " -isystem $HSA_PATH/include";
-    $HIPCFLAGS .= " -isystem $HSA_PATH/include";
     if ($HIP_RUNTIME ne "HCC" ) {
       $HIPCXXFLAGS .= " -D__HIP_ROCclr__";
       $HIPCFLAGS .= " -D__HIP_ROCclr__";
@@ -323,10 +318,6 @@
     exit (-1);
 }
 
-# Add paths to common HIP includes:
-$HIPCXXFLAGS .= " -isystem $HIP_INCLUDE_PATH" ;
-$HIPCFLAGS .= " -isystem $HIP_INCLUDE_PATH" ;
-
 my $compileOnly = 0;
 my $needCXXFLAGS = 0;  # need to add CXX flags to compile step
 my $needCFLAGS = 0;    # need to add C flags to compile step
